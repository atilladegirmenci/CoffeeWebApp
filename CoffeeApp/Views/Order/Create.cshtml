@model CoffeeApp.Models.Order
@using CoffeeApp.Models
@using System.Globalization

@{
    var products = ViewBag.Products as List<Product>;
}

<h2 class="text-center mb-4">Place Order</h2>

<form asp-action="Create" method="post">
    <input type="hidden" name="CartJson" id="cartInput" /> 

    <div id="orderDetailsContainer" class="row g-4">
        @foreach (var product in products)
        {
            if(product.IsAvailable == true)
            {
                <div class="product-card  col-md-4 d-flex flex-column align-items-center text-center">
                <img src="@product.ImageUrl" class="img-fluid" style="max-height: 200px;" />
                <h5 class="mt-2">@product.Name</h5>
                <p>@product.Price.ToString("C", new CultureInfo("tr-TR"))</p>
                <input type="number" min="1" class="form-control mb-2" id="qty-@product.Id" placeholder="Adet" />
                <button type="button" class="btn btn-outline-primary"
                        onclick="addToCart(@product.Id, '@product.Name', @product.Price)">
                    Add to Cart
                </button>
                </div>
                
            }
        }
    </div>

    <div class="mt-5">
        <h4>Cart:</h4>
        <div id="cartSummary" class="mb-3"></div>

        <button type="submit" class="btn btn-success px-5 py-2">Complete Order</button>

        <div class="mt-3">
            <button type="button" onclick="clearCart()" class="btn btn-danger px-4 py-2">Clear Cart</button>
        </div>
    </div>

</form>

<script>
    let cart = [];

    function addToCart(productId, name, price) {
        const qtyInput = document.getElementById(`qty-${productId}`);
        const qty = parseInt(qtyInput.value);
        if (!qty || qty <= 0) {
            alert("Lütfen geçerli bir adet giriniz.");
            return;
        }

        const existing = cart.find(p => p.ProductId === productId);
        if (existing) {
            existing.Quantity += qty;
        } else {
            cart.push({ ProductId: productId, Name: name, Price: price, Quantity: qty });
        }

        qtyInput.value = ""; // Eklendikten sonra inputu sıfırla
        updateCartUI();
    }
    
    function updateCartUI() {
        const container = document.getElementById("cartSummary");
        container.innerHTML = "";
        let totalPrice = 0;
        cart.forEach((item) => {
            const itemTotal = item.Price * item.Quantity;
            totalPrice += itemTotal;

            container.innerHTML += `
                    <div>${item.Name} x ${item.Quantity} = ${(item.Price * item.Quantity).toFixed(2)}₺</div>
                `;
        });
        container.innerHTML += `<hr/><div><strong>Toplam: ${totalPrice.toFixed(2)}₺</strong></div>`;


        // JSON formatında cart'ı input'a aktar
        document.getElementById("cartInput").value = JSON.stringify(cart);
    }
    function clearCart() {
        cart = [];
        updateCartUI();
    }
</script>


